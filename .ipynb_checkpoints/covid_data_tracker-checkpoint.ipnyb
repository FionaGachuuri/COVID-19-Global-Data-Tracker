# COVID-19 Global Data Tracker
# Complete Jupyter Notebook Implementation

# Import required libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
from datetime import datetime
import warnings
warnings.filterwarnings('ignore')

# Set plotting styles
plt.style.use('seaborn')
sns.set(font_scale=1.2)
pd.set_option('display.max_columns', None)

# SECTION 1: DATA COLLECTION AND LOADING
print("## 1. DATA COLLECTION AND LOADING")
print("="*80)

# Load the dataset
# Uncomment this line to download the data directly
# !wget -O owid-covid-data.csv https://covid.ourworldindata.org/data/owid-covid-data.csv

print("Loading COVID-19 data from Our World in Data...")
try:
    df = pd.read_csv('owid-covid-data.csv')
    print(f"Data loaded successfully! Dataset shape: {df.shape}")
except FileNotFoundError:
    print("Error: CSV file not found. Please download the dataset from:")
    print("https://covid.ourworldindata.org/data/owid-covid-data.csv")
    print("and save it to the same directory as this notebook.")
    # For demonstration, we'll create a small sample dataframe
    print("Creating sample data for demonstration...")
    # Sample data creation code would go here

# Basic dataset exploration
print("\n## Initial Data Exploration")
print("="*80)
print(f"Dataset Shape: {df.shape}")
print(f"Time Range: {df['date'].min()} to {df['date'].max()}")
print(f"\nFirst few rows:")
display(df.head())

print("\nColumns available in the dataset:")
columns = list(df.columns)
for i, col in enumerate(columns):
    print(f"{i+1}. {col}")

print("\nChecking for missing values in key columns:")
key_columns = ['location', 'date', 'total_cases', 'new_cases', 'total_deaths', 
               'new_deaths', 'total_vaccinations', 'people_vaccinated', 'population']
missing_values = df[key_columns].isnull().sum()
missing_percentage = (df[key_columns].isnull().sum() / len(df)) * 100
missing_df = pd.DataFrame({'Missing Values': missing_values, 
                          'Percentage': missing_percentage})
display(missing_df)

# Display dataset information
print("\nDataset Information:")
df.info()

# SECTION 2: DATA CLEANING AND PREPROCESSING
print("\n## 2. DATA CLEANING AND PREPROCESSING")
print("="*80)

# Convert date column to datetime
df['date'] = pd.to_datetime(df['date'])
print("Date column converted to datetime format.")

# Get list of unique countries
print(f"\nTotal number of countries/regions in the dataset: {df['location'].nunique()}")
print("\nSample of countries in the dataset:")
print(df['location'].unique()[:20])

# Filter out aggregated regions
df = df[~df['location'].isin(['World', 'European Union', 'International'])].copy()
print(f"\nFiltered out aggregated regions. New shape: {df.shape}")

# Select key countries for analysis (top countries by total cases + some geographical diversity)
countries_of_interest = ['United States', 'India', 'Brazil', 'United Kingdom', 
                         'France', 'Germany', 'Russia', 'South Africa', 'Japan', 
                         'Kenya', 'Australia']
df_filtered = df[df['location'].isin(countries_of_interest)].copy()
print(f"\nSelected {len(countries_of_interest)} countries for detailed analysis.")

# Handle missing values in key columns
print("\nHandling missing values...")
# For cases and deaths, we'll use forward fill for time series
for country in countries_of_interest:
    country_mask = df_filtered['location'] == country
    for column in ['total_cases', 'total_deaths', 'new_cases', 'new_deaths']:
        df_filtered.loc[country_mask, column] = df_filtered.loc[country_mask, column].fillna(method='ffill')

# For remaining NaNs, fill with 0
numeric_columns = ['total_cases', 'new_cases', 'total_deaths', 'new_deaths', 
                   'total_vaccinations', 'people_vaccinated']
for col in numeric_columns:
    df_filtered[col] = df_filtered[col].fillna(0)

print("Missing values handled.")

# Calculate additional metrics
print("\nCalculating additional metrics...")
# Calculate death rate (deaths per confirmed case in %)
df_filtered['death_rate'] = np.where(df_filtered['total_cases'] > 0, 
                                     (df_filtered['total_deaths'] / df_filtered['total_cases']) * 100, 
                                     0)

# Calculate vaccination rate (% of population)
df_filtered['vaccination_rate'] = np.where(df_filtered['population'] > 0,
                                          (df_filtered['people_vaccinated'] / df_filtered['population']) * 100,
                                          0)

# Calculate 7-day moving averages for new cases and deaths
for country in countries_of_interest:
    country_mask = df_filtered['location'] == country
    df_filtered.loc[country_mask, 'new_cases_smoothed'] = df_filtered.loc[country_mask, 'new_cases'].rolling(window=7).mean()
    df_filtered.loc[country_mask, 'new_deaths_smoothed'] = df_filtered.loc[country_mask, 'new_deaths'].rolling(window=7).mean()

print("Additional metrics calculated.")
print("\nPreprocessed data sample:")
display(df_filtered.head())

# SECTION 3: EXPLORATORY DATA ANALYSIS (EDA)
print("\n## 3. EXPLORATORY DATA ANALYSIS (EDA)")
print("="*80)

# Time series analysis of cases and deaths
print("\n### Time Series Analysis of Cases and Deaths")

plt.figure(figsize=(20, 12))

# Plot total cases over time
plt.subplot(2, 2, 1)
for country in countries_of_interest:
    country_data = df_filtered[df_filtered['location'] == country]
    plt.plot(country_data['date'], country_data['total_cases'], label=country)
plt.title('Total COVID-19 Cases Over Time', fontsize=14)
plt.xlabel('Date', fontsize=12)
plt.ylabel('Total Cases', fontsize=12)
plt.legend(fontsize=10)
plt.grid(True, alpha=0.3)

# Plot total deaths over time
plt.subplot(2, 2, 2)
for country in countries_of_interest:
    country_data = df_filtered[df_filtered['location'] == country]
    plt.plot(country_data['date'], country_data['total_deaths'], label=country)
plt.title('Total COVID-19 Deaths Over Time', fontsize=14)
plt.xlabel('Date', fontsize=12)
plt.ylabel('Total Deaths', fontsize=12)
plt.legend(fontsize=10)
plt.grid(True, alpha=0.3)

# Plot new cases (7-day average)
plt.subplot(2, 2, 3)
for country in countries_of_interest:
    country_data = df_filtered[df_filtered['location'] == country]
    plt.plot(country_data['date'], country_data['new_cases_smoothed'], label=country)
plt.title('New COVID-19 Cases (7-day avg)', fontsize=14)
plt.xlabel('Date', fontsize=12)
plt.ylabel('New Cases', fontsize=12)
plt.legend(fontsize=10)
plt.grid(True, alpha=0.3)

# Plot new deaths (7-day average)
plt.subplot(2, 2, 4)
for country in countries_of_interest:
    country_data = df_filtered[df_filtered['location'] == country]
    plt.plot(country_data['date'], country_data['new_deaths_smoothed'], label=country)
plt.title('New COVID-19 Deaths (7-day avg)', fontsize=14)
plt.xlabel('Date', fontsize=12)
plt.ylabel('New Deaths', fontsize=12)
plt.legend(fontsize=10)
plt.grid(True, alpha=0.3)

plt.tight_layout()
plt.savefig('covid_time_series.png', dpi=300, bbox_inches='tight')
plt.show()

# Country comparison (latest date)
print("\n### Country Comparison Analysis")
# Get the latest date for each country
latest_data = df_filtered.groupby('location').apply(lambda x: x.loc[x['date'].idxmax()]).reset_index(drop=True)
print("\nLatest data for each country:")
display(latest_data[['location', 'date', 'total_cases', 'total_deaths', 'death_rate']])

# Bar charts for comparison
plt.figure(figsize=(18, 12))

# Total cases by country
plt.subplot(2, 2, 1)
sns.barplot(x='location', y='total_cases', data=latest_data, palette='viridis')
plt.title('Total COVID-19 Cases by Country', fontsize=14)
plt.xlabel('Country', fontsize=12)
plt.ylabel('Total Cases', fontsize=12)
plt.xticks(rotation=45)
plt.grid(True, alpha=0.3)

# Total deaths by country
plt.subplot(2, 2, 2)
sns.barplot(x='location', y='total_deaths', data=latest_data, palette='viridis')
plt.title('Total COVID-19 Deaths by Country', fontsize=14)
plt.xlabel('Country', fontsize=12)
plt.ylabel('Total Deaths', fontsize=12)
plt.xticks(rotation=45)
plt.grid(True, alpha=0.3)

# Death rate by country
plt.subplot(2, 2, 3)
sns.barplot(x='location', y='death_rate', data=latest_data, palette='viridis')
plt.title('COVID-19 Death Rate by Country (%)', fontsize=14)
plt.xlabel('Country', fontsize=12)
plt.ylabel('Death Rate (%)', fontsize=12)
plt.xticks(rotation=45)
plt.grid(True, alpha=0.3)

# Cases per million
plt.subplot(2, 2, 4)
sns.barplot(x='location', y='total_cases_per_million', data=latest_data, palette='viridis')
plt.title('COVID-19 Cases per Million People', fontsize=14)
plt.xlabel('Country', fontsize=12)
plt.ylabel('Cases per Million', fontsize=12)
plt.xticks(rotation=45)
plt.grid(True, alpha=0.3)

plt.tight_layout()
plt.savefig('country_comparison.png', dpi=300, bbox_inches='tight')
plt.show()

# Create a correlation heatmap for numeric columns
print("\n### Correlation Analysis")
numeric_cols = ['total_cases', 'new_cases', 'total_deaths', 'new_deaths', 
                'total_cases_per_million', 'total_deaths_per_million', 
                'new_cases_smoothed', 'new_deaths_smoothed']

# Get the latest data for correlation analysis
correlation_data = df_filtered[['location'] + numeric_cols].copy()
plt.figure(figsize=(12, 10))
correlation_matrix = correlation_data[numeric_cols].corr()
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', linewidths=0.5)
plt.title('Correlation Between COVID-19 Metrics', fontsize=14)
plt.tight_layout()
plt.savefig('correlation_heatmap.png', dpi=300, bbox_inches='tight')
plt.show()

# SECTION 4: VACCINATION PROGRESS ANALYSIS
print("\n## 4. VACCINATION PROGRESS ANALYSIS")
print("="*80)

# Filter data for vaccination analysis (starting from when vaccinations began)
vax_start_date = '2020-12-01'
df_vax = df_filtered[df_filtered['date'] >= vax_start_date].copy()

# Vaccination time series
plt.figure(figsize=(16, 10))

# Plot total vaccinations over time
plt.subplot(2, 1, 1)
for country in countries_of_interest:
    country_data = df_vax[df_vax['location'] == country]
    plt.plot(country_data['date'], country_data['total_vaccinations'], label=country)
plt.title('Cumulative COVID-19 Vaccinations Over Time', fontsize=14)
plt.xlabel('Date', fontsize=12)
plt.ylabel('Total Vaccinations', fontsize=12)
plt.legend(fontsize=10)
plt.grid(True, alpha=0.3)

# Plot vaccination percentage over time
plt.subplot(2, 1, 2)
for country in countries_of_interest:
    country_data = df_vax[df_vax['location'] == country]
    plt.plot(country_data['date'], country_data['vaccination_rate'], label=country)
plt.title('Population Vaccination Percentage Over Time', fontsize=14)
plt.xlabel('Date', fontsize=12)
plt.ylabel('Population Vaccinated (%)', fontsize=12)
plt.legend(fontsize=10)
plt.grid(True, alpha=0.3)

plt.tight_layout()
plt.savefig('vaccination_progress.png', dpi=300, bbox_inches='tight')
plt.show()

# Vaccination comparison bar chart
plt.figure(figsize=(14, 8))
sns.barplot(x='location', y='vaccination_rate', data=latest_data, palette='viridis')
plt.title('COVID-19 Vaccination Rate by Country', fontsize=14)
plt.xlabel('Country', fontsize=12)
plt.ylabel('Population Vaccinated (%)', fontsize=12)
plt.xticks(rotation=45)
plt.grid(True, alpha=0.3)
plt.tight_layout()
plt.savefig('vaccination_comparison.png', dpi=300, bbox_inches='tight')
plt.show()

# SECTION 5: CHOROPLETH MAP VISUALIZATION
print("\n## 5. CHOROPLETH MAP VISUALIZATION")
print("="*80)

# Prepare data for world map
print("Preparing data for choropleth map...")
world_latest = df.groupby('location').apply(lambda x: x.loc[x['date'].idxmax()]).reset_index(drop=True)
world_map_data = world_latest[['iso_code', 'location', 'total_cases', 'total_deaths', 
                              'total_cases_per_million', 'people_vaccinated_per_hundred']].copy()

# Remove locations without ISO codes (like 'World', 'International')
world_map_data = world_map_data[~world_map_data['iso_code'].isna()].copy()

print("Creating interactive choropleth maps...")
# Cases per million map
fig1 = px.choropleth(
    world_map_data,
    locations='iso_code',
    color='total_cases_per_million',
    hover_name='location',
    color_continuous_scale='viridis',
    range_color=[0, world_map_data['total_cases_per_million'].quantile(0.95)],
    title='COVID-19 Cases per Million by Country',
    labels={'total_cases_per_million': 'Cases per Million'},
    projection='natural earth'
)
fig1.update_layout(coloraxis_colorbar=dict(title='Cases per Million'))
fig1.show()
# You can save this figure with: fig1.write_html('covid_cases_map.html')

# Vaccination percentage map
fig2 = px.choropleth(
    world_map_data,
    locations='iso_code',
    color='people_vaccinated_per_hundred',
    hover_name='location',
    color_continuous_scale='viridis',
    range_color=[0, 100],
    title='COVID-19 Vaccination Percentage by Country',
    labels={'people_vaccinated_per_hundred': 'Population Vaccinated (%)'},
    projection='natural earth'
)
fig2.update_layout(coloraxis_colorbar=dict(title='Vaccination %'))
fig2.show()
# You can save this figure with: fig2.write_html('covid_vaccination_map.html')

# SECTION 6: KEY INSIGHTS AND CONCLUSIONS
print("\n## 6. KEY INSIGHTS AND CONCLUSIONS")
print("="*80)

# Calculate some key statistics for insights
highest_cases = latest_data.loc[latest_data['total_cases'].idxmax()]
highest_deaths = latest_data.loc[latest_data['total_deaths'].idxmax()]
highest_death_rate = latest_data.loc[latest_data['death_rate'].idxmax()]
highest_vax_rate = latest_data.loc[latest_data['vaccination_rate'].idxmax()]

print("Key Insights from the COVID-19 Data Analysis:")
print("-" * 50)

print(f"1. Case Distribution:")
print(f"   - {highest_cases['location']} has recorded the highest total cases ({highest_cases['total_cases']:,.0f})")
print(f"   - The average number of total cases across our selected countries is {latest_data['total_cases'].mean():,.0f}")

print(f"\n2. Mortality Analysis:")
print(f"   - {highest_deaths['location']} has recorded the highest total deaths ({highest_deaths['total_deaths']:,.0f})")
print(f"   - {highest_death_rate['location']} has the highest death rate at {highest_death_rate['death_rate']:.2f}%")
print(f"   - The average death rate across our selected countries is {latest_data['death_rate'].mean():.2f}%")

print(f"\n3. Vaccination Progress:")
print(f"   - {highest_vax_rate['location']} leads in vaccination with {highest_vax_rate['vaccination_rate']:.2f}% of the population")
print(f"   - The average vaccination rate across our selected countries is {latest_data['vaccination_rate'].mean():.2f}%")

print(f"\n4. Regional Patterns:")
print("   - There are significant regional differences in both case rates and vaccination progress")
print("   - Developed countries generally show higher testing and vaccination rates")

print(f"\n5. Temporal Trends:")
print("   - Multiple distinct waves of infection are visible in most countries")
print("   - Vaccination rollouts have varied significantly in timing and speed between countries")

print("\nConclusions:")
print("-" * 50)
print("This analysis demonstrates the global impact of COVID-19 and highlights the different")
print("approaches and outcomes across countries. While some countries have achieved high")
print("vaccination rates, others still lag behind. The data shows that COVID-19 impacts")
print("have varied greatly, influenced by factors such as healthcare infrastructure,")
print("policy decisions, population density, and timing of interventions.")

# OPTIONAL: Save the processed data
print("\nSaving processed data to CSV...")
df_filtered.to_csv('processed_covid_data.csv', index=False)
latest_data.to_csv('latest_covid_data_by_country.csv', index=False)

print("\nAnalysis complete! All visualizations have been saved.")